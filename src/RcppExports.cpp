// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// IsingProcess
IntegerMatrix IsingProcess(int nSample, const arma::sp_mat& graph, NumericVector thresholds, double beta, IntegerVector responses);
RcppExport SEXP _SparseIsingSampler_IsingProcess(SEXP nSampleSEXP, SEXP graphSEXP, SEXP thresholdsSEXP, SEXP betaSEXP, SEXP responsesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nSample(nSampleSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type graph(graphSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type responses(responsesSEXP);
    rcpp_result_gen = Rcpp::wrap(IsingProcess(nSample, graph, thresholds, beta, responses));
    return rcpp_result_gen;
END_RCPP
}
// IsingSamplerCpp
IntegerMatrix IsingSamplerCpp(int n, const arma::sp_mat& graph, NumericVector thresholds, double beta, int nIter, IntegerVector responses, bool exact);
RcppExport SEXP _SparseIsingSampler_IsingSamplerCpp(SEXP nSEXP, SEXP graphSEXP, SEXP thresholdsSEXP, SEXP betaSEXP, SEXP nIterSEXP, SEXP responsesSEXP, SEXP exactSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type graph(graphSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type thresholds(thresholdsSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type nIter(nIterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type responses(responsesSEXP);
    Rcpp::traits::input_parameter< bool >::type exact(exactSEXP);
    rcpp_result_gen = Rcpp::wrap(IsingSamplerCpp(n, graph, thresholds, beta, nIter, responses, exact));
    return rcpp_result_gen;
END_RCPP
}
// H
double H(const arma::sp_mat& J, IntegerVector s, NumericVector h);
RcppExport SEXP _SparseIsingSampler_H(SEXP JSEXP, SEXP sSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type J(JSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(H(J, s, h));
    return rcpp_result_gen;
END_RCPP
}
// f
double f(IntegerMatrix Y, const arma::sp_mat& J, NumericVector h);
RcppExport SEXP _SparseIsingSampler_f(SEXP YSEXP, SEXP JSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type J(JSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(f(Y, J, h));
    return rcpp_result_gen;
END_RCPP
}
// Hvec
double Hvec(IntegerVector s, NumericVector Theta, int N);
RcppExport SEXP _SparseIsingSampler_Hvec(SEXP sSEXP, SEXP ThetaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Theta(ThetaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(Hvec(s, Theta, N));
    return rcpp_result_gen;
END_RCPP
}
// expvalues
NumericVector expvalues(IntegerMatrix x);
RcppExport SEXP _SparseIsingSampler_expvalues(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(expvalues(x));
    return rcpp_result_gen;
END_RCPP
}
// vec2Thresh
NumericVector vec2Thresh(NumericVector vec, int P);
RcppExport SEXP _SparseIsingSampler_vec2Thresh(SEXP vecSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2Thresh(vec, P));
    return rcpp_result_gen;
END_RCPP
}
// vec2Graph
arma::sp_mat vec2Graph(NumericVector vec, int P);
RcppExport SEXP _SparseIsingSampler_vec2Graph(SEXP vecSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(vec2Graph(vec, P));
    return rcpp_result_gen;
END_RCPP
}
// Broderick2013
NumericVector Broderick2013(IntegerMatrix x, int M, int T, int nIter, IntegerVector responses);
RcppExport SEXP _SparseIsingSampler_Broderick2013(SEXP xSEXP, SEXP MSEXP, SEXP TSEXP, SEXP nIterSEXP, SEXP responsesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< int >::type nIter(nIterSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type responses(responsesSEXP);
    rcpp_result_gen = Rcpp::wrap(Broderick2013(x, M, T, nIter, responses));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SparseIsingSampler_IsingProcess", (DL_FUNC) &_SparseIsingSampler_IsingProcess, 5},
    {"_SparseIsingSampler_IsingSamplerCpp", (DL_FUNC) &_SparseIsingSampler_IsingSamplerCpp, 7},
    {"_SparseIsingSampler_H", (DL_FUNC) &_SparseIsingSampler_H, 3},
    {"_SparseIsingSampler_f", (DL_FUNC) &_SparseIsingSampler_f, 3},
    {"_SparseIsingSampler_Hvec", (DL_FUNC) &_SparseIsingSampler_Hvec, 3},
    {"_SparseIsingSampler_expvalues", (DL_FUNC) &_SparseIsingSampler_expvalues, 1},
    {"_SparseIsingSampler_vec2Thresh", (DL_FUNC) &_SparseIsingSampler_vec2Thresh, 2},
    {"_SparseIsingSampler_vec2Graph", (DL_FUNC) &_SparseIsingSampler_vec2Graph, 2},
    {"_SparseIsingSampler_Broderick2013", (DL_FUNC) &_SparseIsingSampler_Broderick2013, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SparseIsingSampler(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
